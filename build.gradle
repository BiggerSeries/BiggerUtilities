buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }

        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

version = '0.0.0'
group = 'net.roguelogix.biggerutilities' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "biggerutilities-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        url 'https://squiddev.cc/maven/'
    }
}


minecraft {
    mappings channel: 'snapshot', version: "${forge_mappings}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

repositories {
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url 'https://modmaven.k-4u.nl/'
    }
    maven {
        url 'https://modmaven.dev/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compile project(':Phosphophyllite')

//    compileOnly fg.deobf("org.squiddev:cc-tweaked-${cc_mc_version}:${cc_version}")

//    compileOnly "mekanism:Mekanism:${mekanism_mc_version}-${mekanism_version}:api"

    // compile against the JEI API but do not include it at runtime
//    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"   : "BiggerUtilities",
//                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version" : "1", // We are version 1 of ourselves
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${version}",
//                "Implementation-Vendor"   : "examplemodsareus",
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}